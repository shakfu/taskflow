#include <chrono>
#include <ratio>
#include <sstream> // __str__

#include <functional>
#include <pybind11/pybind11.h>
#include <string>
#include <pybind11/stl.h>


#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>)
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*)
	PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>)
#endif

void bind_std_chrono(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	{ // std::chrono::duration file:chrono line:1023
		pybind11::class_<std::chrono::duration<long long,std::ratio<1, 1000000000>>, std::shared_ptr<std::chrono::duration<long long,std::ratio<1, 1000000000>>>> cl(M("std::chrono"), "duration_long_long_std_ratio_1_1000000000_t", "");
		cl.def( pybind11::init( [](){ return new std::chrono::duration<long long,std::ratio<1, 1000000000>>(); } ) );
		cl.def( pybind11::init( [](std::chrono::duration<long long,std::ratio<1, 1000000000>> const &o){ return new std::chrono::duration<long long,std::ratio<1, 1000000000>>(o); } ) );
		cl.def("count", (long long (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)() const) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::count, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::count() const --> long long");
		cl.def("__pos__", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)() const) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator+, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator+() const --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> >");
		cl.def("__neg__", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)() const) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator-, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator-() const --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> >");
		cl.def("plus_plus", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > & (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)()) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator++, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator++() --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &", pybind11::return_value_policy::automatic);
		cl.def("plus_plus", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)(int)) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator++, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator++(int) --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> >", pybind11::arg(""));
		cl.def("minus_minus", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > & (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)()) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator--, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator--() --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &", pybind11::return_value_policy::automatic);
		cl.def("minus_minus", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)(int)) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator--, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator--(int) --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> >", pybind11::arg(""));
		cl.def("__iadd__", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > & (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)(const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &)) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator+=, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator+=(const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &) --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &", pybind11::return_value_policy::automatic, pybind11::arg("__d"));
		cl.def("__isub__", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > & (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)(const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &)) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator-=, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator-=(const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &) --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &", pybind11::return_value_policy::automatic, pybind11::arg("__d"));
		cl.def("__imul__", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > & (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)(const long long &)) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator*=, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator*=(const long long &) --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &", pybind11::return_value_policy::automatic, pybind11::arg("rhs"));
		cl.def("__itruediv__", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > & (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)(const long long &)) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator/=, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator/=(const long long &) --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &", pybind11::return_value_policy::automatic, pybind11::arg("rhs"));
		cl.def("__imod__", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > & (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)(const long long &)) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator%=, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator%=(const long long &) --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &", pybind11::return_value_policy::automatic, pybind11::arg("rhs"));
		cl.def("__imod__", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > & (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)(const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &)) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator%=, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator%=(const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &) --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &", pybind11::return_value_policy::automatic, pybind11::arg("rhs"));
		cl.def_static("zero", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > (*)()) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::zero, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::zero() --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> >");
		cl.def_static("min", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > (*)()) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::min, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::min() --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> >");
		cl.def_static("max", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > (*)()) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::max, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::max() --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> >");
		cl.def("assign", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > & (std::chrono::duration<long long,std::ratio<1, 1000000000>>::*)(const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &)) &std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator=, "C++: std::chrono::duration<long long, std::ratio<1, 1000000000> >::operator=(const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &) --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &", pybind11::return_value_policy::automatic, pybind11::arg(""));
	}
	{ // std::chrono::time_point file:chrono line:1357
		pybind11::class_<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long, std::ratio<1, 1000000000> >>, std::shared_ptr<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long, std::ratio<1, 1000000000> >>>> cl(M("std::chrono"), "time_point_std_chrono_steady_clock_std_chrono_duration_long_long_std_ratio_1_1000000000_t", "");
		cl.def( pybind11::init( [](){ return new std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long, std::ratio<1, 1000000000> >>(); } ) );
		cl.def( pybind11::init<const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &>(), pybind11::arg("__d") );

		cl.def( pybind11::init( [](std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long, std::ratio<1, 1000000000> >> const &o){ return new std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long, std::ratio<1, 1000000000> >>(o); } ) );
		cl.def("time_since_epoch", (class std::chrono::duration<long long, class std::ratio<1, 1000000000> > (std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long, std::ratio<1, 1000000000> >>::*)() const) &std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > >::time_since_epoch, "C++: std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > >::time_since_epoch() const --> class std::chrono::duration<long long, class std::ratio<1, 1000000000> >");
		cl.def("__iadd__", (class std::chrono::time_point<class std::chrono::steady_clock, class std::chrono::duration<long long, class std::ratio<1, 1000000000> > > & (std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long, std::ratio<1, 1000000000> >>::*)(const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &)) &std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > >::operator+=, "C++: std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > >::operator+=(const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &) --> class std::chrono::time_point<class std::chrono::steady_clock, class std::chrono::duration<long long, class std::ratio<1, 1000000000> > > &", pybind11::return_value_policy::automatic, pybind11::arg("__d"));
		cl.def("__isub__", (class std::chrono::time_point<class std::chrono::steady_clock, class std::chrono::duration<long long, class std::ratio<1, 1000000000> > > & (std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long, std::ratio<1, 1000000000> >>::*)(const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &)) &std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > >::operator-=, "C++: std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > >::operator-=(const class std::chrono::duration<long long, class std::ratio<1, 1000000000> > &) --> class std::chrono::time_point<class std::chrono::steady_clock, class std::chrono::duration<long long, class std::ratio<1, 1000000000> > > &", pybind11::return_value_policy::automatic, pybind11::arg("__d"));
		cl.def_static("min", (class std::chrono::time_point<class std::chrono::steady_clock, class std::chrono::duration<long long, class std::ratio<1, 1000000000> > > (*)()) &std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > >::min, "C++: std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > >::min() --> class std::chrono::time_point<class std::chrono::steady_clock, class std::chrono::duration<long long, class std::ratio<1, 1000000000> > >");
		cl.def_static("max", (class std::chrono::time_point<class std::chrono::steady_clock, class std::chrono::duration<long long, class std::ratio<1, 1000000000> > > (*)()) &std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > >::max, "C++: std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > >::max() --> class std::chrono::time_point<class std::chrono::steady_clock, class std::chrono::duration<long long, class std::ratio<1, 1000000000> > >");
		cl.def("assign", (class std::chrono::time_point<class std::chrono::steady_clock, class std::chrono::duration<long long, class std::ratio<1, 1000000000> > > & (std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long, std::ratio<1, 1000000000> >>::*)(const class std::chrono::time_point<class std::chrono::steady_clock, class std::chrono::duration<long long, class std::ratio<1, 1000000000> > > &)) &std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > >::operator=, "C++: std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > >::operator=(const class std::chrono::time_point<class std::chrono::steady_clock, class std::chrono::duration<long long, class std::ratio<1, 1000000000> > > &) --> class std::chrono::time_point<class std::chrono::steady_clock, class std::chrono::duration<long long, class std::ratio<1, 1000000000> > > &", pybind11::return_value_policy::automatic, pybind11::arg(""));
	}
}
